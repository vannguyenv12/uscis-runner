const axios = require('axios');

// Tr√≠ch ng√†y notice t·ª´ m√¥ t·∫£
function extractNoticeDate(text) {
  const match = text.match(/(?:on|as of) (\w+ \d{1,2}, \d{4})/i);
  if (!match) return null;

  const [_, dateStr] = match;
  try {
    const [monthName, day, year] = dateStr.split(/[\s,]+/);
    const months = {
      January: 0,
      February: 1,
      March: 2,
      April: 3,
      May: 4,
      June: 5,
      July: 6,
      August: 7,
      September: 8,
      October: 9,
      November: 10,
      December: 11,
    };
    const utcDate = new Date(Date.UTC(+year, months[monthName], +day));
    return utcDate.toISOString().split('T')[0];
  } catch {
    return null;
  }
}

// Delay
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// G·ªçi USCIS API c√≥ ki·ªÉm so√°t retry t√°ch bi·ªát
async function callUscisApi(
  receiptNumber,
  maxCommonRetries = 10,
  maxMismatchRetries = 10,
  delayMs = 1000
) {
  let commonAttempts = 0;
  let mismatchCount = 0;

  while (
    commonAttempts < maxCommonRetries &&
    mismatchCount < maxMismatchRetries
  ) {
    try {
      const response = await axios.post(
        process.env.BACKEND_URL,
        { receiptNumber },
        {
          headers: { 'v-api-key': process.env.API_KEY },
        }
      );

      const content = response.data?.trim();

      if (content === 'doi_chut') {
        return { wait: true };
      }

      // D·ªØ li·ªáu r·ªóng
      if (!content) {
        commonAttempts++;
        console.warn(
          `‚ö†Ô∏è D·ªØ li·ªáu r·ªóng. Retry ${commonAttempts}/${maxCommonRetries}`
        );
        await sleep(delayMs);
        continue;
      }

      const lines = content.split('\n');
      if (!lines[1] || !lines[1].startsWith('1:')) {
        commonAttempts++;
        console.warn(
          `‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Retry ${commonAttempts}/${maxCommonRetries}`
        );
        await sleep(delayMs);
        continue;
      }

      let parsed;
      try {
        parsed = JSON.parse(lines[1].slice(2));
      } catch (err) {
        commonAttempts++;
        console.warn(
          `‚ùå JSON parse l·ªói. Retry ${commonAttempts}/${maxCommonRetries}`
        );
        await sleep(delayMs);
        continue;
      }

      const caseData = parsed.data.CaseStatusResponse;
      const receiptFromResponse = caseData.receiptNumber?.trim();
      const action_desc = caseData.detailsEng.actionCodeDesc;
      const status_en = caseData.detailsEng.actionCodeText;
      const form_info = `${caseData.detailsEng.formNum} - ${caseData.detailsEng.formTitle}`;
      const notice_date = extractNoticeDate(action_desc);

      // ‚úÖ Ki·ªÉm tra receipt trong action_desc
      const matchReceiptInText = action_desc.match(/Receipt Number (\w+)/i);
      const receiptInText = matchReceiptInText?.[1]?.trim();

      console.log('‚úÖ Check receipt trong action_desc:', receiptInText);

      if (receiptInText && receiptInText !== receiptNumber) {
        mismatchCount++;
        console.warn(
          `üö® Receipt KH√îNG KH·ªöP: API=${receiptNumber}, m√¥ t·∫£=${receiptInText}. Mismatch ${mismatchCount}/${maxMismatchRetries}`
        );
        await sleep(delayMs);
        continue;
      }

      console.log('*** 1.[uscisApi.js]:', action_desc);
      console.log('--------------------------------');

      return {
        receipt_number: receiptFromResponse,
        action_desc,
        status_en,
        form_info,
        notice_date,
        raw: parsed,
      };
    } catch (err) {
      commonAttempts++;
      console.error(
        `‚ùå L·ªói h·ªá th·ªëng: ${err.message}. Retry ${commonAttempts}/${maxCommonRetries}`
      );
      await sleep(delayMs);
    }
  }

  const reason =
    mismatchCount >= maxMismatchRetries
      ? 'L·ªói mismatch nhi·ªÅu l·∫ßn'
      : 'L·ªói h·ªá th·ªëng ho·∫∑c d·ªØ li·ªáu qu√° nhi·ªÅu l·∫ßn';

  return {
    error: true,
    message: `G·ªçi API th·∫•t b·∫°i (${reason})`,
  };
}

module.exports = {
  callUscisApi,
  extractNoticeDate,
};
