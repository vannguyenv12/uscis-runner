const pool = require('./db/db');

async function backfillUpdatedStatusAt() {
  try {
    const [rows] = await pool.query(`
      SELECT receipt_number, status_en, action_desc, updated_at
      FROM uscis
      WHERE updated_status_at IS NULL
    `);

    if (!rows.length) {
      console.log('‚úÖ Kh√¥ng c√≥ h·ªì s∆° n√†o c·∫ßn c·∫≠p nh·∫≠t updated_status_at.');
      return;
    }

    for (const row of rows) {
      const { receipt_number, status_en, action_desc, updated_at } = row;

      // L·∫•y log g·∫ßn nh·∫•t (is_log_email = 0)
      const [[log]] = await pool.query(
        `
        SELECT updated_at_log, status_en, action_desc
        FROM status_log
        WHERE receipt_number = ?
          AND is_log_email = 0
        ORDER BY updated_at_log DESC
        LIMIT 1
        `,
        [receipt_number]
      );

      if (!log) {
        console.warn(
          `‚ö†Ô∏è Kh√¥ng c√≥ log cho ${receipt_number} ‚Üí B·ªé QUA (kh√¥ng c·∫≠p nh·∫≠t).`
        );
        continue;
      }

      const hasChanged =
        log.status_en !== status_en || log.action_desc !== action_desc;

      if (!hasChanged) {
        console.log(
          `‚è© Tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi cho ${receipt_number} ‚Üí B·ªé QUA`
        );
        continue;
      }

      // N·∫øu c√≥ thay ƒë·ªïi ‚Üí c·∫≠p nh·∫≠t updated_status_at = updated_at
      await pool.query(
        `
        UPDATE uscis
        SET updated_status_at = ?
        WHERE receipt_number = ?
        `,
        [updated_at, receipt_number]
      );

      console.log(
        `‚úÖ ƒê√£ c·∫≠p nh·∫≠t updated_status_at cho ${receipt_number} ‚Üí ${updated_at}`
      );
    }

    console.log('üéâ Ho√†n t·∫•t c·∫≠p nh·∫≠t updated_status_at.');
  } catch (err) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t updated_status_at:', err.message);
  }
}

backfillUpdatedStatusAt();
